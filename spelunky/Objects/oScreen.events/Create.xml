<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">scrReadStats();
scrInit();</argument>
      </arguments>
    </action>
    <action id="408" library="1">
      <!--action name: If-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>true</question>
      <canApplyTo>true</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_if</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="EXPRESSION">global.fullscreen</argument>
      </arguments>
    </action>
    <action id="531" library="1">
      <!--action name: Fullscreen-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_fullscreen</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="MENU">2</argument>
      </arguments>
    </action>
    <action id="408" library="1">
      <!--action name: If-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>true</question>
      <canApplyTo>true</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_if</functionName>
      <relative>false</relative>
      <not>true</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="EXPRESSION">global.fullscreen</argument>
      </arguments>
    </action>
    <action id="531" library="1">
      <!--action name: Fullscreen-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_fullscreen</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="MENU">1</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">py = 0; // player Y coord

displayheight=display_get_height();
displaywidth=display_get_width();

// screen base(view_wview and view_hview)
screen_x = 0;
screen_y = 0;
screen_w = 320;
screen_h = 240;
screen_scale = global.screenScale;

//Spelunky 1.2 7-3-2012 Scale up to resolution
if(global.screenScale==5){
    if(displayheight&lt;displaywidth)
        screen_scale = displayheight/screen_h;
    else
        screen_scale = displaywidth/screen_w;
    global.screenScale=screen_scale;
}
//Spelunky 1.2 7-3-2012 Soft fullscreen
if(global.softfullscreen==1){
    window_set_showborder(false);
    window_set_size(displaywidth,displayheight);
    window_set_position(0,0);
}

enabled = true;

// pause
pSurf = surface_create(screen_w,screen_h);
canPause = true;
paused = false;

// create a surface for the whole screen to be drawn on
screen = surface_create(screen_w,screen_h);
darkSurf = surface_create(screen_w,screen_h);

if (screen)
{
    surface_set_target(screen);
    draw_clear(c_black);
}

// set up rooms
var w,h;
w = 320 * screen_scale;
h = 240 * screen_scale;
room_set_view(rIntro,0,true,0,0,320,240,0,0,w,h,128,0,-1,-1,oPDummy3);
room_set_view(rCredits1,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rCredits2,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTitle,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rHighscores,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rSun,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rMoon,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rStars,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rLevelEditor,0,true,0,0,320,240,0,0,w,h,0,0,-1,-1,noone);
room_set_view(rLoadLevel,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rTutorial,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel2,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rLevel3,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rOlmec,0,true,0,0,320,240,0,0,w,h,128,96,-1,-1,oPlayer1);
room_set_view(rTransition1,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition1x,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition2,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition2x,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition3,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition3x,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rTransition4,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rEnd,0,true,0,0,320,240,0,0,w,h,0,0,0,0,oPDummy);
room_set_view(rEnd2,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rEnd3,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);
room_set_view(rEndCustom,0,true,0,0,320,240,0,0,w,h,0,0,0,0,noone);

// this will destroy the screen object if surfaces are not supported on the graphics card, reverting to the viewport method
if (screen == -1) game_end();
else room_goto_next();
</argument>
      </arguments>
    </action>
  </actions>
</event>
