<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if ((x &gt; view_xview[0]-20 and x &lt; view_xview[0] + view_wview[0]+4 and
        y &gt; view_yview[0]-20 and y &lt; view_yview[0] + view_hview[0]+4))
{
moveTo(xVel, yVel);

if (collision_point(x+8, y+8, oSolid, 0, 0)) hp = -999;

if (hp &lt; 1)
{
    repeat(3)
    {
        obj = instance_create(x+2+rand(0,14), y+2+rand(0,14), oFlareSpark);
        obj.yVel = rand(1,3);
    }
    instance_destroy();
}

dir = 0
dist = point_distance(x+8, y+8, oCharacter.x, oCharacter.y)

if (status == IDLE)
{
    if (xVel &gt; 0) xVel -= 0.5;
    if (yVel &gt; 0) yVel -= 0.5;
    if (xVel &lt; 0) xVel += 0.5;
    if (yVel &lt; 0) yVel += 0.5;
    if (abs(xVel) &lt; 1) { xVel = 0; }
    if (abs(yVel) &lt; 1) { yVel = 0; }
    
    if (xVel == 0 and yVel == 0 and counter &gt; 0) counter -= 1;
    
    if (counter == 0 and xVel &lt; 1 and yVel &lt; 1)
    {
        if (dist &lt; 64)
        {
            dir = point_direction(x+8, y+8, oCharacter.x, oCharacter.y) + 180;
        }
        else
        {
            dir = rand(0,360);
        }
        xVel = 4 * cos(degtorad(dir));
        yVel = -4 * sin(degtorad(dir));
        counter = rand(10,30);
    }
    
    if (isCollisionRight(1) and xVel &gt; 0)
    {
        xVel = -xVel;
    }
    if (isCollisionLeft(1) and xVel &lt; 0)
    {
        xVel = -xVel;
    }
    if (isCollisionTop(1) and yVel &lt; 0)
    {
        yVel = -yVel;
    }
    if (isCollisionBottom(1) and yVel &gt; 0)
    {
        yVel = -yVel;
    }
}
}</argument>
      </arguments>
    </action>
  </actions>
</event>
